<!DOCTYPE html>
<!-- saved from url=(0056)file:///Users/nikolapeevski/Downloads/hwk5-charting.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<style type="text/css">
/* 13. Basic Styling with CSS */

/* Style the lines by removing the fill and applying a stroke */
.line {
    fill: none;
    stroke: #ffab00;
    stroke-width: 3;
}
  
.overlay {
  fill: none;
  pointer-events: all;
}

/* Style the dots by assigning a fill and stroke */
.dot {
    fill: #ffab00;
    stroke: #fff;
}
  .focus circle {
  fill: none;
  stroke: steelblue;
}
</style>


<!-- Load in the d3 library -->
<script src="./hwk5-charting_files/d3.v5.min.js"></script>
<script>
String.prototype.replaceAll = (search, replacement) => {
    let target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};

function f (data) {
	data = eval(data.replaceAll("~", "-").replaceAll(' ', ','));

  // 2. Use the margin convention practice 
  var margin = {top: 100, right: 100, bottom: 100, left: 100}
    , width = window.innerWidth - margin.left - margin.right // Use the window's width 
    , height = window.innerHeight - margin.top - margin.bottom; // Use the window's height

  // The number of datapoints
  var n = data.length;
  var min = Math.min(...data), max = Math.max(...data);

  // 5. X scale will use the index of our data
  var xScale = d3.scaleLinear()
      .domain([0, n-1]) // input
      .range([0, width]); // output

  // 6. Y scale will use the randomly generate number 
  var yScale = d3.scaleLinear()
      .domain([min, max]) // input 
      .range([height, 0]); // output 

  // 7. d3's line generator
  var line = d3.line()
      .x(function(d, i) { return xScale(i); }) // set the x values for the line generator
      .y(function(d) { return yScale(d.y); }) // set the y values for the line generator 
      .curve(d3.curveMonotoneX) // apply smoothing to the line

  // 8. An array of objects of length N. Each object has key -> value pair, the key being "y" and the value is a random number
  var dataset = d3.range(n)
                  .map(d => { 
                      return {'y': data[d]};
                    });
    // .map(function(d) { return {"y": data[d] } })

  // 1. Add the SVG to the page and employ #2
	
  d3.select("#chart").selectAll("*").remove();

  var svg = d3.select("#chart")
      .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // 3. Call the x axis in a group tag
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom

  // 4. Call the y axis in a group tag
  svg.append("g")
      .attr("class", "y axis")
      .call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft

  // 9. Append the path, bind the data, and call the line generator 
  svg.append("path")
      .datum(dataset) // 10. Binds data to the line 
      .attr("class", "line") // Assign a class for styling 
      .attr("d", line); // 11. Calls the line generator 

  // 12. Appends a circle for each datapoint 
  svg.selectAll(".dot")
      .data(dataset)
      .enter()
      .append("circle") // Uses the enter().append() method
      .attr("class", "dot") // Assign a class for styling
      .attr("cx", function(d, i) { return xScale(i) })
      .attr("cy", function(d) { return yScale(d.y) })
      .attr("r", 5)
}
</script>

</head><body>
<!-- Body tag is where we will append our SVG and SVG objects-->
<textarea rows="7" cols="100" id="inputbox"></textarea>
<button onclick="f(document.getElementById(&#39;inputbox&#39;).value)">update</button>
<div id="chart"></div>


</body></html>